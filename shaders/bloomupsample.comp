#version 460 core
#extension GL_ARB_bindless_texture : require

uniform int inputMip;

layout(bindless_sampler) uniform sampler2D inputTex;

layout(r11f_g11f_b10f, binding = 2) restrict uniform image2D frameBuffer;

layout (local_size_x = 8, local_size_y = 8) in;
void main() {
	ivec2 dimensions = imageSize(frameBuffer);
	vec2 uv = (vec2(gl_GlobalInvocationID.xy) + vec2(0.5f)) / dimensions;
	vec2 texelSize = 1.5f / textureSize(inputTex, inputMip);

	vec3 a = textureLod(inputTex, uv + texelSize * vec2(-1.0f,  1.0f), inputMip).rgb;
	vec3 b = textureLod(inputTex, uv + texelSize * vec2( 0.0f,  1.0f), inputMip).rgb;
	vec3 c = textureLod(inputTex, uv + texelSize * vec2( 1.0f,  1.0f), inputMip).rgb;
	vec3 d = textureLod(inputTex, uv + texelSize * vec2(-1.0f,  0.0f), inputMip).rgb;
	vec3 e = textureLod(inputTex, uv + texelSize * vec2( 0.0f,  0.0f), inputMip).rgb;
	vec3 f = textureLod(inputTex, uv + texelSize * vec2( 1.0f,  0.0f), inputMip).rgb;
	vec3 g = textureLod(inputTex, uv + texelSize * vec2(-1.0f, -1.0f), inputMip).rgb;
	vec3 h = textureLod(inputTex, uv + texelSize * vec2( 0.0f, -1.0f), inputMip).rgb;
	vec3 i = textureLod(inputTex, uv + texelSize * vec2( 1.0f, -1.0f), inputMip).rgb;

	vec3 color = imageLoad(frameBuffer, ivec2(gl_GlobalInvocationID.xy)).rgb;
	color += ((a + c + g + i) + (b + d + f + h) * 2.0f + e * 4.0f) / 16.0f;
	imageStore(frameBuffer, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.0f));
}