#version 460 core

#define EPSILON 0.000001f

layout(r11f_g11f_b10f, binding = 0) restrict readonly uniform image2DMS src;
layout(r11f_g11f_b10f, binding = 1) restrict writeonly uniform image2D dst;

vec3 toneMap(vec3 inputColor) {
	const float exposure2 = 25.0f;
	float oldLuminance = dot(inputColor, vec3(0.2126f, 0.7152f, 0.0722f));
	float newLuminance = oldLuminance * (1.0f + oldLuminance / exposure2) / (1.0f + oldLuminance);
	return inputColor * (newLuminance / (oldLuminance + EPSILON));
}

vec3 invToneMap(vec3 inputColor) {
	const float exposure2 = 25.0f;
	float oldLuminance = dot(inputColor, vec3(0.2126f, 0.7152f, 0.0722f));
	float newLuminance = (exposure2 * (oldLuminance + sqrt((1.0f - oldLuminance) * (1.0f - oldLuminance) + (4.0f * oldLuminance / exposure2)) - 1.0f)) / 2.0f;
	return inputColor * (newLuminance / (oldLuminance + EPSILON));
}

layout (local_size_x = 8, local_size_y = 8) in;
void main() {
	ivec2 dimensions = imageSize(dst);
	if(gl_GlobalInvocationID.x > dimensions.x || gl_GlobalInvocationID.y > dimensions.y) {
		return;
	}

	int numSamples = imageSamples(src);
	vec3 color = vec3(0.0f, 0.0f, 0.0f);
	for(int i = 0; i < numSamples; i++) {
		color += toneMap(imageLoad(src, ivec2(gl_GlobalInvocationID.xy), i).rgb);
	}

	imageStore(dst, ivec2(gl_GlobalInvocationID.xy), vec4(invToneMap(color / numSamples), 1.0f));
}